interface CaffeineItem {
  Call(unit: CaffeineUnit): boolean;
  Click(x: number | CaffeineVector3, y?: number, z?: number): boolean;
  Condition(name: string, func: (self: CaffeineItem) => void): CaffeineItem;
  EvaluateCondition(name: string): boolean;
  GetCharges(): number;
  GetChargesRemaining(): number;
  GetCondition(name: string): ((self: CaffeineItem) => boolean) | null;
  GetCooldown(): number;
  GetCooldownRemaining(): number;
  GetIcon(): number;
  GetID(): number;
  GetLastUseAttempt(): number;
  GetLastUseTime(): number;
  GetName(): string;
  GetOnUseFunction(): ((self: CaffeineItem) => void) | boolean;
  GetPreUseFunction(): ((self: CaffeineItem) => void) | boolean;
  GetSpell(): CaffeineSpell | null;
  GetTarget(): CaffeineUnit | null;
  GetTimeSinceLastUse(): number;
  GetTimeSinceLastUseAttempt(): number;
  GetUsableFunction(): ((self: CaffeineItem) => void) | boolean;
  GetWasLooking(): boolean;
  HasCondition(name: string): boolean;
  IsCurseDispel(): boolean;
  IsDiseaseDispel(): boolean;
  IsEquippable(): boolean;
  IsEquipped(): boolean;
  IsEquippedAndUsable(): boolean;
  IsInRange(unit: CaffeineUnit): boolean;
  IsItem(item: CaffeineItem): boolean;
  IsMagicDispel(): boolean;
  IsOnCooldown(): boolean;
  IsPoisonDispel(): boolean;
  IsUsable(): boolean;
  New(id: number): CaffeineItem;
  OnUse(func: (self: CaffeineItem) => void): CaffeineItem;
  PreUse(func: (self: CaffeineItem) => void): CaffeineItem;
  SetTarget(unit: CaffeineUnit): CaffeineItem;
  Usable(): boolean;
  UsableIf(func: (self: CaffeineItem) => boolean): CaffeineItem;
  Use(unit: CaffeineUnit, condition: string): boolean;
}
